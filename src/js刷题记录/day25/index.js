/**
 * @param {number[]} nums
 * @return {number[]}
 * 解题思路:使用额外空间返回结果res
 * 利用for循环遍历，遍历次数为数组的长度
 * 由于范围在[1,n],所以i从1开始每次循环在nums中找有没有i,有的话不操作，没有的将i添加到res中
 */
// let findDisappearedNumbers = function (nums) {
//     let res = []
//     let length = nums.length
//     for (let i = 1; i <= length; i++) {
//         if (!nums.includes(i)) {
//             res.push(i)
//         }
//     }
//     return res
// };

// console.log(findDisappearedNumbers([1, 1]))


/**
 * @param {number[]} g
 * @param {number[]} s
 * @return {number}
 * 解题思路1：
 * 对饼干从小到大排序,
 * 遍历孩子胃口，遍历过程中找能够满足当前胃口的饼干,因为饼干已经排序，所以满足当前胃口的饼干一定是最小的，
 * 将饼干大小改为false,以便在后续遍历的过程中重复。同时满足的数量++
 */
// let findContentChildren = function (g, s) {
//     let count = 0
//     let index = 0
//     s = s.sort((a, b) => a - b)
//     for (let i = 0; i < g.length; i++) {
//         index = s.findIndex(s => (s >= g[i]))
//         if (index !== -1) {
//             count++
//             s[index] = false
//         }
//     }
//     return count
// };

/**
 * @param {number[]} g
 * @param {number[]} s
 * @return {number}
 * 解题思路2：
 * 将孩子胃口从小到大排序
 * 将饼干大小从小到大排序
 * 用while循环,遍历到最后一个孩子或者最后一个饼干时结束
 * 如果当前饼干能满足孩子，则看下一个孩子，因为比较前已经进行过排序所以当前能满足孩子的饼干大小一定是最小的
 * 当前饼干不满足时看下一块，满足时此饼干已经被消费，所以无论如何饼干的下标都要递增
 */
let findContentChildren = function (g, s) {
    if (g.length === 0 || s.length === 0) return 0
    const g_sort = g.sort((a, b) => a - b)
    const s_sort = s.sort((a, b) => a - b)
    let gi = 0
    let si = 0
    while (gi < g_sort.length && si < s_sort.length) {
        if (g_sort[gi] <= s_sort[si]) {
            gi++
        }
        si++
    }
    return gi
};


console.log(findContentChildren(
    [262, 437, 433, 102, 438, 346, 131, 160, 281, 34, 219, 373, 466, 275, 51, 118, 209, 32, 108, 57, 385, 514, 439, 73, 271, 442, 366, 515, 284, 425, 491, 466, 322, 34, 484, 231, 450, 355, 106, 279, 496, 312, 96, 461, 446, 422, 143, 98, 444, 461, 142, 234, 416, 45, 271, 344, 446, 364, 216, 16, 431, 370, 120, 463, 377, 106, 113, 406, 406, 481, 304, 41, 2, 174, 81, 220, 158, 104, 119, 95, 479, 323, 145, 205, 218, 482, 345, 324, 253, 368, 214, 379, 343, 375, 134, 145, 268, 56, 206],
    [149, 79, 388, 251, 417, 82, 233, 377, 95, 309, 418, 400, 501, 349, 348, 400, 461, 495, 104, 330, 155, 483, 334, 436, 512, 232, 511, 40, 343, 334, 307, 56, 164, 276, 399, 337, 59, 440, 3, 458, 417, 291, 354, 419, 516, 4, 370, 106, 469, 254, 274, 163, 345, 513, 130, 292, 330, 198, 142, 95, 18, 295, 126, 131, 339, 171, 347, 199, 244, 428, 383, 43, 315, 353, 91, 289, 466, 178, 425, 112, 420, 85, 159, 360, 241, 300, 295, 285, 310, 76, 69, 297, 155, 416, 333, 416, 226, 262, 63, 445, 77, 151, 368, 406, 171, 13, 198, 30, 446, 142, 329, 245, 505, 238, 352, 113, 485, 296, 337, 507, 91, 437, 366, 511, 414, 46, 78, 399, 283, 106, 202, 494, 380, 479, 522, 479, 438, 21, 130, 293, 422, 440, 71, 321, 446, 358, 39, 447, 427, 6, 33, 429, 324, 76, 396, 444, 519, 159, 45, 403, 243, 251, 373, 251, 23, 140, 7, 356, 194, 499, 276, 251, 311, 10, 147, 30, 276, 430, 151, 519, 36, 354, 162, 451, 524, 312, 447, 77, 170, 428, 23, 283, 249, 466, 39, 58, 424, 68, 481, 2, 173, 179, 382, 334, 430, 84, 151, 293, 95, 522, 358, 505, 63, 524, 143, 119, 325, 401, 6, 361, 284, 418, 169, 256, 221, 330, 23, 72, 185, 376, 515, 84, 319, 27, 66, 497]))